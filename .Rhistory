fileUrl
doc
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
install.packages("XML")
library(XML)
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
library(xml2)
doc<-read_xml(fileUrl)
rootnode<-xmlRoot(doc)
xml_attrs(doc)
doc
xml_find_all(doc, ".//zipcode")
zipcode<-xml_find_all(doc,".//zipcode")
zipcode
zipcode=21231
zipcode
zipcode<-xml_find_all(doc,".//zipcode")
zipcode<-xml_find_all(doc,".//zipcode"=21231)
zipcode<-xml_find_all(doc,".//zipcode=21231")
doc[1]
doc[1][1]
doc[[1]]
rootnode<-xmlRoot(doc)
doc
zipcode
zipcode[1]
y<-zipcode=21231
xml_find_all(zipcode, ".//21231")
count<-xml_find_all(zipcode, ".//21231")
count
xml_contents(zipcode)
zipcode
zipcode_content<-xml_contents(zipcode)
zipcode_content
xml_find_all(zipcode=content,ns="21231")
xml_find_all(zipcode_content,ns="21231")
xml_name(zipcode)
xml_name(zipcode_content)
xmlApply(zipcode_content, function(x) x=21231)
xmlAttrs(node=zipcode,doc)
xmlAttrs(node="zipcode",doc)
zipcode_content
matrix(zipcode_content)
matrix(zipcode_content[1])
matrix(zipcode_content[2])
zipcode_content[[1]]
zipcode_content[[2]]
zipcode_content[[1][1]]
zipcode_content[[1][2]
zipcode_content[2]
matrix(zipcode_content[2])
xml_has_attr(zipcode, "21231")
xml_has_attr(zipcode_content, "21231")
zipcode_content
xml_attrs("zipcode")
xml_attrs(doc,"zipcode")
y<-xml_attrs(doc,"zipcode")
y
count(zipcode_content=21231)
zipcode_content==21231
library(XML)
url<-"http://biostat.jhsph.edu/~jleek/contact.html "
html<-htmlTreeParse(url,useInternalNodes = =T)
html<-htmlTreeParse(url,useInternalNodes = T)
com=url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode=readLines(con)
htmlCode=readLines(com)
close(con)
close(com)
htmlCode
html[10]
htmlCode[10]
charnum<-sapply(c(htmlcode[10],htmlcode[20],htmlcode[30], htmlcode[100]),nchar())
charnum<-sapply(c(htmlcode[10],htmlcode[20],htmlcode[30], htmlcode[100]),nchar(x))
charnum<-c(htmlcode[10],htmlcode[20],htmlcode[30], htmlcode[100])
charnum<-c(htmlCode[10],htmlCode[20],htmlCode[30], htmlCode[100])
charnum
nchar(charnum)
library(XML)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html<-htmlTreeParse(url,useInternalNodes = T)
url2<-"http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
html<-htmlTreeParse(url2,useInternalNodes = T)
html
html[,4]
html[[,4]]
html[[1,4]]
html[1]
html[rootnode]
html
xmlRoot(html)
rootNode<-xmlRoot(html)
rootNode
xmlName(rootNode)
names(rootNode)
rootnode[[1]][[1]]
rootNode[[1]][[1]]
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "2ee990d0ace6bdc12270",
secret = "6f7c2e445f61ac568ef4333a894e53ce29f7a0c7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
?connections
valFOR<-url(open="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
valFOR<-url(description="valFOR",open="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
ff<-tempfile()
read.fortran(ff,"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",sep="\t")
read.fortran(ff,"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",sep="\t", as.is=FALSE)
df <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
df
df[,4]
sum(df[,4])
df[,9]
df <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4),
skip=4
)
sum(df[,4])
View(my_vector)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringasFactors=FALSE)
mydf<-read.csv(file=path2csv, stringasFactors=FALSE)
mydf<-read.csv(filepath=path2csv, stringasFactors=FALSE)
mydf<-read.csv(file=path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version=="3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran, size (>) 100500, r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country, desc(r_version),ip_id)
cran3<-select(c(ip_id,package,size))
cran3<-select(cran,c(ip_id,package,size))
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2@20)
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3,correct_size=size*1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package=group_by(cran,package)
by_package<-group_by(cran,package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts, count)
top_counts_sorted<-arrange(top_counts, desc(count)
)
view(top_counts_sorted)
View(ttop_ctop_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
chain1.R
call(chain1.R)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2, key<-sex_class, value<-column_count)
res<-gather(students2, key=sex_class, value=column count)
res<-gather(students2, key=sex_class, value=count)
res<-(students2, sex_class, count, -grade)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class,into=(c("sex", "class")))
separate(data=res, col=sex_class,into=c("sex", "class"))
submit()
students3
?gather
submit
submit()
?spread
submit()
submit()
extract_numeric(class5)
extract_numeric("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("1975-03-12")
ymd("1975 March 12")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("--192012")
ymd("1-9-2012")
ymd("1920-1-2")
dtl
dt
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hour=hour(now()),minute=minute(now()))
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hour=17, minute=34)
depart<-update(depart, hours=17, minutes=34)
depart
depart<-nyc+hours(15)+minutes(50)
arrive<-nyc+hours(15)+minutes(50)
arrive<-depart+hours(15)+minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
arrive <- (depart + hours(15) + minutes(50))
info
info()
arrive <- (depart + hours(15) + minutes(50))
arrive<- now(China/Hong Kong) + days(2) + hours(15) + minutes(50)
arrive<- now(China/Hong_Kong) + days(2) + hours(15) + minutes(50)
?noq
?now
skip()
arrive <- depart + hours(15) + minutes(50)
skip()
skip()
info()
bye()
swirl()
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singaport")
last_time<-mdy("June 17 2008", tz="Singaport")
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval()
?new_interval
new_interval(last_time, arrive)
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(datasets)
library(lattice)
airquality<-transform(airquality, Month=factor(Month))
xyplot(Ozone~Wind|Month, data=airquality, layout=c(5,1))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines
?lines
?text
?trellis.par.set
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
?llines
setwd("~/R/Reproducible Research")
activityData <- read.csv('activity.csv')
head(activityData)
head(activityData,20)
head(activityData,200)
head(activityData,2000)
head(activityData,20)
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
library(ggplot2)
qplot(stepsByDay, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500)
?qplot
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=50, geom="histogram")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=1000, geom="histogram")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colors="blue")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colors=blu)
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colors=cyl)
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colour=cyl)
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colour=blu)
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colour="blue")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", col="blue")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram)
"
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", colour="#000099")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", fill="#000099")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", fill="#0072B2")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", fill="#0072B2")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", fill="#0072B2")
qplot(stepsByDay, xlab='Total steps per day', ylab='Freq Using BinWidth 500', binwidth=500, geom="histogram", fill=I("blue"))
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median(stepsPerDay)
stepsPerDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
stepsPerDayMean <- mean(stepsPerDay)
stepsPerDayMedian <- median(stepsPerDay)
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=activityData$steps), by=list(interval=activityData$interval), FUN=mean, na.rm=TRUE)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
?aggregate
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
mostSteps
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
timeMostSteps
averageStepsPerTimeBlock[mostSteps]
averageStepsPerTimeBlock[mostSteps, 'interval']
ans<-averageStepsPerTimeBlock[mostSteps,'interval']
ans
hms(835)
ymd_hms(ans)
library(lubridate)
hms(ans)
?gsub
length(ans)
lengths(ans)
character(ans)
ans
substr(ans, 1, 2)
paste0(substr(ans,1,1), ":", substr(ans,3,2))
paste0(substr(ans,1,1), ":", substr(ans,2,2))
paste0(substr(ans,1,1), ":", substr(ans,2,3))
char(ans)
character(ans)
paste0(substr(ans,1,1), ":", substr(ans,2,3))
hms(paste0(substr(ans,1,1), ":", substr(ans,2,3)))
as.POSIXct(x = paste0(substr(ans,1,1), ":", substr(ans,2,3)), format = "%H:%M")
head(averageStepsPerTimeBlock)
paste0(substr(ans,1,2), ":", substr(ans,3,4))
ans/100
gsub("([ab])", "\\1_\\1_", "abc and ABC")
gsub("[.]", "\1:", "8.35")
gsub("[.]", "\\1:", "8.35")
gsub("[.]", "\\1:", "8.35.536")
gsub("[.]", "\\1:", ans/100)
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
ans<-averageStepsPerTimeBlock[mostSteps,'interval']
timeMostSteps<-gsub("[.]", "\\1:", ans/100)
timeMostSteps
numMissingValues <- length(which(is.na(activityData$steps)))
numMissingValues
is.na(activityDataSteps)
is.na(activityData$Steps)
which(is.na(activityData$Steps))
which(is.na(activityData$steps))
is.na(activityData$steps)
?impute
library(data.table)
DT<-data.table(activityData)
Dt
DT
setkey(DT,interval)
DT[,steps := ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps), by=interval]
library(plyr)
ddply(activityData,
.(interval),
transform,
value=ifelse(is.na(steps), median(steps, na.rm=TRUE), steps))
library(plyr)
ddply(activityData,
.(interval),
transform,
value=ifelse(is.na(steps), mean(steps, na.rm=TRUE), steps))
DT[,steps := ifelse(is.na(steps), median(steps, na.rm=TRUE), steps), by=interval]
DT
stepsPerDayDT <- tapply(DT$steps, DT$date, sum)
qplot(stepsPerDayDT, xlab='Total Steps/ Day (NA replaced by Median/Interval)', ylab='Frequency Using Bin Width 500', binwidth=500)
qplot(stepsPerDayDT, xlab='Total Steps/ Day (NA replaced by Median/Interval)', ylab='Frequency Using Bin Width 500', binwidth=500, col=I("blue"))
qplot(stepsPerDayDT, xlab='Total Steps/ Day (NA replaced by Median/Interval)', ylab='Frequency Using Bin Width 500', binwidth=500, fill=I("blue"))
stepsPerDayMeanDT <- mean(stepsPerDayDT)
stepsPerDayMedianDT <- median(stepsPerDayDT)
stepsPerDayMean
stepsPerDayMeanDT
stepsPerDayMedian
stepsPerDayMedianDT
activityDataDT$dateType <-  ifelse(as.POSIXlt(activityDataDT$date)$wday %in% c(0,6), 'weekend', 'weekday')
DT$dateType <-  ifelse(as.POSIXlt(DT$date)$wday %in% c(0,6), 'weekend', 'weekday')
averageActivityDataDT <- aggregate(steps ~ interval + dateType, data=DT, mean)
ggplot(averageActivityDataDT, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
